// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Raft.proto

#include "Raft.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

namespace Raft {
class RaftDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Raft> _instance;
} _Raft_default_instance_;
}  // namespace Raft
static void InitDefaultsRaft_Raft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Raft::_Raft_default_instance_;
    new (ptr) ::Raft::Raft();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Raft::Raft::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Raft_Raft_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRaft_Raft_2eproto}, {}};

void InitDefaults_Raft_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_Raft_Raft_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_Raft_2eproto[1];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_Raft_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_Raft_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_Raft_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Raft::Raft, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Raft::Raft)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::Raft::_Raft_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_Raft_2eproto = {
  {}, AddDescriptors_Raft_2eproto, "Raft.proto", schemas,
  file_default_instances, TableStruct_Raft_2eproto::offsets,
  file_level_metadata_Raft_2eproto, 1, file_level_enum_descriptors_Raft_2eproto, file_level_service_descriptors_Raft_2eproto,
};

const char descriptor_table_protodef_Raft_2eproto[] =
  "\n\nRaft.proto\022\004Raft\"\006\n\004Raftb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_Raft_2eproto = {
  false, InitDefaults_Raft_2eproto, 
  descriptor_table_protodef_Raft_2eproto,
  "Raft.proto", &assign_descriptors_table_Raft_2eproto, 34,
};

void AddDescriptors_Raft_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_Raft_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Raft_2eproto = []() { AddDescriptors_Raft_2eproto(); return true; }();
namespace Raft {

// ===================================================================

void Raft::InitAsDefaultInstance() {
}
class Raft::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Raft::Raft()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Raft.Raft)
}
Raft::Raft(const Raft& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Raft.Raft)
}

void Raft::SharedCtor() {
}

Raft::~Raft() {
  // @@protoc_insertion_point(destructor:Raft.Raft)
  SharedDtor();
}

void Raft::SharedDtor() {
}

void Raft::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Raft& Raft::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Raft_Raft_2eproto.base);
  return *internal_default_instance();
}


void Raft::Clear() {
// @@protoc_insertion_point(message_clear_start:Raft.Raft)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Raft::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Raft*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Raft::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Raft.Raft)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Raft.Raft)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Raft.Raft)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Raft::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Raft.Raft)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Raft.Raft)
}

::google::protobuf::uint8* Raft::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Raft.Raft)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Raft.Raft)
  return target;
}

size_t Raft::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Raft.Raft)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Raft::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Raft.Raft)
  GOOGLE_DCHECK_NE(&from, this);
  const Raft* source =
      ::google::protobuf::DynamicCastToGenerated<Raft>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Raft.Raft)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Raft.Raft)
    MergeFrom(*source);
  }
}

void Raft::MergeFrom(const Raft& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Raft.Raft)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Raft::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Raft.Raft)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Raft::CopyFrom(const Raft& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Raft.Raft)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Raft::IsInitialized() const {
  return true;
}

void Raft::Swap(Raft* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Raft::InternalSwap(Raft* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Raft::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Raft_2eproto);
  return ::file_level_metadata_Raft_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Raft
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::Raft::Raft* Arena::CreateMaybeMessage< ::Raft::Raft >(Arena* arena) {
  return Arena::CreateInternal< ::Raft::Raft >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
